// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package users

import (
	"context"
	"database/sql"
)

const createAlert = `-- name: CreateAlert :exec
INSERT INTO user_alerts (
  id, keyword
) VALUES (
  $1, $2
)
`

type CreateAlertParams struct {
	ID      string
	Keyword string
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) error {
	_, err := q.db.ExecContext(ctx, createAlert, arg.ID, arg.Keyword)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id, username, webhook_url
) VALUES (
  $1, $2, $3
)
RETURNING id, username, webhook_url, created
`

type CreateUserParams struct {
	ID         string
	Username   string
	WebhookUrl sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.WebhookUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WebhookUrl,
		&i.Created,
	)
	return i, err
}

const deleteAlert = `-- name: DeleteAlert :exec
DELETE FROM user_alerts
WHERE alert_id = $1
`

func (q *Queries) DeleteAlert(ctx context.Context, alertID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAlert, alertID)
	return err
}

const deleteAllAlerts = `-- name: DeleteAllAlerts :exec
DELETE FROM user_alerts
WHERE id = $1
`

func (q *Queries) DeleteAllAlerts(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAllAlerts, id)
	return err
}

const getAlerts = `-- name: GetAlerts :many
SELECT alert_id, id, keyword FROM user_alerts
`

func (q *Queries) GetAlerts(ctx context.Context) ([]UserAlert, error) {
	rows, err := q.db.QueryContext(ctx, getAlerts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAlert
	for rows.Next() {
		var i UserAlert
		if err := rows.Scan(&i.AlertID, &i.ID, &i.Keyword); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, webhook_url, created FROM users 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.WebhookUrl,
		&i.Created,
	)
	return i, err
}

const getUserAlerts = `-- name: GetUserAlerts :many
SELECT alert_id, id, keyword FROM user_alerts
WHERE id = $1
`

func (q *Queries) GetUserAlerts(ctx context.Context, id string) ([]UserAlert, error) {
	rows, err := q.db.QueryContext(ctx, getUserAlerts, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAlert
	for rows.Next() {
		var i UserAlert
		if err := rows.Scan(&i.AlertID, &i.ID, &i.Keyword); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserExistence = `-- name: GetUserExistence :one
SELECT 1 FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserExistence(ctx context.Context, id string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserExistence, id)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, webhook_url, created FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.WebhookUrl,
			&i.Created,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
